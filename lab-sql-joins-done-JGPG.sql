-- Jose G Portela 
/*Write SQL queries to perform the following tasks using the Sakila database:*/
USE sakila;
SHOW TABLES FROM sakila;

/*1.List the number of films per category.*/
SELECT * FROM category;
SELECT * FROM film;

SELECT c.category_id, c.name AS category, COUNT(f.film_id) AS film_count FROM category c
LEFT JOIN film_category fc ON c.category_id = fc.category_id LEFT JOIN film f ON fc.film_id = f.film_id GROUP BY c.category_id, c.name;

/*2.Retrieve the store ID, city, and country for each store.*/
SELECT * FROM store;
SELECT * FROM city;

SELECT s.store_id, c.city, c.country_id FROM store s JOIN address a ON s.address_id = a.address_id
JOIN city c ON a.city_id = c.city_id;

/*3.Calculate the total revenue generated by each store in dollars.*/
SELECT * FROM store;
SELECT * FROM staff;
SELECT * FROM payment;

SELECT s.store_id, SUM(p.amount) AS total_revenue FROM store s JOIN staff staff ON s.manager_staff_id = staff.staff_id
JOIN payment p ON staff.staff_id = p.staff_id GROUP BY s.store_id;

/*4.Determine the average running time of films for each category.*/
SELECT * FROM category;
SELECT * FROM film;

SELECT c.category_id, c.name AS category, AVG(f.length) AS average_running_time FROM category c LEFT JOIN film_category fc ON c.category_id = fc.category_id
LEFT JOIN film f ON fc.film_id = f.film_id GROUP BY c.category_id, c.name;

/*Bonus:*/
/*5.Identify the film categories with the longest average running time.*/
SELECT * FROM category;
SELECT * FROM film;

SELECT c.category_id, c.name AS category, AVG(f.length) AS average_running_time FROM category c LEFT JOIN film_category fc ON c.category_id = fc.category_id
LEFT JOIN film f ON fc.film_id = f.film_id GROUP BY c.category_id, c.name ORDER BY average_running_time DESC LIMIT 1;

/*6.Display the top 10 most frequently rented movies in descending order.*/
SELECT * FROM film;
SELECT * FROM rental;

SELECT f.title, COUNT(r.rental_id) AS rental_count FROM film f LEFT JOIN inventory i ON f.film_id = i.film_id LEFT JOIN rental r ON i.inventory_id = r.inventory_id
GROUP BY f.film_id, f.title ORDER BY rental_count DESC LIMIT 10;

/*7.Determine if "Academy Dinosaur" can be rented from Store 1.*/
SELECT * FROM film;
SELECT * FROM store;

SELECT f.title, s.store_id, CASE WHEN i.inventory_id IS NOT NULL THEN 'Available' ELSE 'NOT available' END AS availability_status
FROM film f JOIN inventory i ON f.film_id = i.film_id JOIN store s ON i.store_id = s.store_id WHERE f.title = 'Academy Dinosaur' AND s.store_id = 1;

/*8.Provide a list of all distinct film titles, along with their availability status in the inventory. Include a column indicating whether each title is 'Available' or 'NOT available.' Note that 
there are 42 titles that are not in the inventory, and this information can be obtained using a CASE statement combined with IFNULL."*/
SELECT * FROM film;
SELECT * FROM inventory;

SELECT f.title, CASE WHEN i.inventory_id IS NOT NULL THEN 'Available' ELSE 'NOT available' END AS availability_status FROM film f
LEFT JOIN inventory i ON f.film_id = i.film_id;
